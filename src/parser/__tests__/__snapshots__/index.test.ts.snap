// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`OpenAPI parser petstore parser 1`] = `
Object {
  "apis": Object {
    "pet": Array [
      Object {
        "body": Object {
          "_tag": "Some",
          "value": Object {
            "required": true,
            "type": Object {
              "dependencies": Array [],
              "kind": "CustomCombinator",
              "runtime": "models.Pet",
              "static": "models.Pet",
            },
          },
        },
        "method": "post",
        "name": "addPet",
        "params": Array [],
        "path": "/pet",
        "responses": Array [],
      },
      Object {
        "body": Object {
          "_tag": "Some",
          "value": Object {
            "required": true,
            "type": Object {
              "dependencies": Array [],
              "kind": "CustomCombinator",
              "runtime": "models.Pet",
              "static": "models.Pet",
            },
          },
        },
        "method": "put",
        "name": "updatePet",
        "params": Array [],
        "path": "/pet",
        "responses": Array [],
      },
      Object {
        "body": Object {
          "_tag": "None",
        },
        "method": "get",
        "name": "findPetsByStatus",
        "params": Array [
          Object {
            "in": "query",
            "name": "status",
            "required": true,
            "type": Object {
              "kind": "ArrayCombinator",
              "name": undefined,
              "type": Object {
                "dependencies": Array [],
                "kind": "CustomCombinator",
                "runtime": "models.StatusItems",
                "static": "models.StatusItems",
              },
            },
          },
        ],
        "path": "/pet/findByStatus",
        "responses": Array [
          Object {
            "code": "200",
            "mediaType": "application/json",
            "type": Object {
              "kind": "ArrayCombinator",
              "name": undefined,
              "type": Object {
                "dependencies": Array [],
                "kind": "CustomCombinator",
                "runtime": "models.Pet",
                "static": "models.Pet",
              },
            },
          },
        ],
      },
      Object {
        "body": Object {
          "_tag": "None",
        },
        "method": "get",
        "name": "findPetsByTags",
        "params": Array [
          Object {
            "in": "query",
            "name": "tags",
            "required": true,
            "type": Object {
              "kind": "ArrayCombinator",
              "name": undefined,
              "type": Object {
                "kind": "StringType",
                "name": "string",
              },
            },
          },
        ],
        "path": "/pet/findByTags",
        "responses": Array [
          Object {
            "code": "200",
            "mediaType": "application/json",
            "type": Object {
              "kind": "ArrayCombinator",
              "name": undefined,
              "type": Object {
                "dependencies": Array [],
                "kind": "CustomCombinator",
                "runtime": "models.Pet",
                "static": "models.Pet",
              },
            },
          },
        ],
      },
      Object {
        "body": Object {
          "_tag": "None",
        },
        "method": "delete",
        "name": "deletePet",
        "params": Array [
          Object {
            "in": "header",
            "name": "api_key",
            "required": false,
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
          Object {
            "in": "path",
            "name": "petId",
            "required": true,
            "type": Object {
              "kind": "IntegerType",
              "name": "Integer",
            },
          },
        ],
        "path": "/pet/{petId}",
        "responses": Array [],
      },
      Object {
        "body": Object {
          "_tag": "None",
        },
        "method": "get",
        "name": "getPetById",
        "params": Array [
          Object {
            "in": "path",
            "name": "petId",
            "required": true,
            "type": Object {
              "kind": "IntegerType",
              "name": "Integer",
            },
          },
        ],
        "path": "/pet/{petId}",
        "responses": Array [
          Object {
            "code": "200",
            "mediaType": "application/json",
            "type": Object {
              "dependencies": Array [],
              "kind": "CustomCombinator",
              "runtime": "models.Pet",
              "static": "models.Pet",
            },
          },
        ],
      },
      Object {
        "body": Object {
          "_tag": "None",
        },
        "method": "post",
        "name": "updatePetWithForm",
        "params": Array [
          Object {
            "in": "path",
            "name": "petId",
            "required": true,
            "type": Object {
              "kind": "IntegerType",
              "name": "Integer",
            },
          },
        ],
        "path": "/pet/{petId}",
        "responses": Array [],
      },
      Object {
        "body": Object {
          "_tag": "None",
        },
        "method": "post",
        "name": "uploadFile",
        "params": Array [
          Object {
            "in": "path",
            "name": "petId",
            "required": true,
            "type": Object {
              "kind": "IntegerType",
              "name": "Integer",
            },
          },
        ],
        "path": "/pet/{petId}/uploadImage",
        "responses": Array [
          Object {
            "code": "200",
            "mediaType": "application/json",
            "type": Object {
              "dependencies": Array [],
              "kind": "CustomCombinator",
              "runtime": "models.ApiResponse",
              "static": "models.ApiResponse",
            },
          },
        ],
      },
    ],
    "store": Array [
      Object {
        "body": Object {
          "_tag": "None",
        },
        "method": "get",
        "name": "getInventory",
        "params": Array [],
        "path": "/store/inventory",
        "responses": Array [
          Object {
            "code": "200",
            "mediaType": "application/json",
            "type": Object {
              "kind": "AnyDictionaryType",
              "name": "UnknownRecord",
            },
          },
        ],
      },
      Object {
        "body": Object {
          "_tag": "Some",
          "value": Object {
            "required": true,
            "type": Object {
              "dependencies": Array [],
              "kind": "CustomCombinator",
              "runtime": "models.Order",
              "static": "models.Order",
            },
          },
        },
        "method": "post",
        "name": "placeOrder",
        "params": Array [],
        "path": "/store/order",
        "responses": Array [
          Object {
            "code": "200",
            "mediaType": "application/json",
            "type": Object {
              "dependencies": Array [],
              "kind": "CustomCombinator",
              "runtime": "models.Order",
              "static": "models.Order",
            },
          },
        ],
      },
      Object {
        "body": Object {
          "_tag": "None",
        },
        "method": "delete",
        "name": "deleteOrder",
        "params": Array [
          Object {
            "in": "path",
            "name": "orderId",
            "required": true,
            "type": Object {
              "kind": "IntegerType",
              "name": "Integer",
            },
          },
        ],
        "path": "/store/order/{orderId}",
        "responses": Array [],
      },
      Object {
        "body": Object {
          "_tag": "None",
        },
        "method": "get",
        "name": "getOrderById",
        "params": Array [
          Object {
            "in": "path",
            "name": "orderId",
            "required": true,
            "type": Object {
              "kind": "IntegerType",
              "name": "Integer",
            },
          },
        ],
        "path": "/store/order/{orderId}",
        "responses": Array [
          Object {
            "code": "200",
            "mediaType": "application/json",
            "type": Object {
              "dependencies": Array [],
              "kind": "CustomCombinator",
              "runtime": "models.Order",
              "static": "models.Order",
            },
          },
        ],
      },
    ],
    "user": Array [
      Object {
        "body": Object {
          "_tag": "Some",
          "value": Object {
            "required": true,
            "type": Object {
              "dependencies": Array [],
              "kind": "CustomCombinator",
              "runtime": "models.User",
              "static": "models.User",
            },
          },
        },
        "method": "post",
        "name": "createUser",
        "params": Array [],
        "path": "/user",
        "responses": Array [],
      },
      Object {
        "body": Object {
          "_tag": "Some",
          "value": Object {
            "required": true,
            "type": Object {
              "kind": "ArrayCombinator",
              "name": undefined,
              "type": Object {
                "dependencies": Array [],
                "kind": "CustomCombinator",
                "runtime": "models.User",
                "static": "models.User",
              },
            },
          },
        },
        "method": "post",
        "name": "createUsersWithArrayInput",
        "params": Array [],
        "path": "/user/createWithArray",
        "responses": Array [],
      },
      Object {
        "body": Object {
          "_tag": "Some",
          "value": Object {
            "required": true,
            "type": Object {
              "kind": "ArrayCombinator",
              "name": undefined,
              "type": Object {
                "dependencies": Array [],
                "kind": "CustomCombinator",
                "runtime": "models.User",
                "static": "models.User",
              },
            },
          },
        },
        "method": "post",
        "name": "createUsersWithListInput",
        "params": Array [],
        "path": "/user/createWithList",
        "responses": Array [],
      },
      Object {
        "body": Object {
          "_tag": "None",
        },
        "method": "get",
        "name": "loginUser",
        "params": Array [
          Object {
            "in": "query",
            "name": "username",
            "required": true,
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
          Object {
            "in": "query",
            "name": "password",
            "required": true,
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
        ],
        "path": "/user/login",
        "responses": Array [
          Object {
            "code": "200",
            "mediaType": "application/json",
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
        ],
      },
      Object {
        "body": Object {
          "_tag": "None",
        },
        "method": "get",
        "name": "logoutUser",
        "params": Array [],
        "path": "/user/logout",
        "responses": Array [],
      },
      Object {
        "body": Object {
          "_tag": "None",
        },
        "method": "delete",
        "name": "deleteUser",
        "params": Array [
          Object {
            "in": "path",
            "name": "username",
            "required": true,
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
        ],
        "path": "/user/{username}",
        "responses": Array [],
      },
      Object {
        "body": Object {
          "_tag": "None",
        },
        "method": "get",
        "name": "getUserByName",
        "params": Array [
          Object {
            "in": "path",
            "name": "username",
            "required": true,
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
        ],
        "path": "/user/{username}",
        "responses": Array [
          Object {
            "code": "200",
            "mediaType": "application/json",
            "type": Object {
              "dependencies": Array [],
              "kind": "CustomCombinator",
              "runtime": "models.User",
              "static": "models.User",
            },
          },
        ],
      },
      Object {
        "body": Object {
          "_tag": "Some",
          "value": Object {
            "required": true,
            "type": Object {
              "dependencies": Array [],
              "kind": "CustomCombinator",
              "runtime": "models.User",
              "static": "models.User",
            },
          },
        },
        "method": "put",
        "name": "updateUser",
        "params": Array [
          Object {
            "in": "path",
            "name": "username",
            "required": true,
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
        ],
        "path": "/user/{username}",
        "responses": Array [],
      },
    ],
  },
  "document": Object {
    "components": Object {
      "parameters": Object {
        "Username": Object {
          "description": "The username",
          "explode": false,
          "in": "path",
          "name": "username",
          "required": true,
          "schema": Object {
            "type": "string",
          },
          "style": "simple",
        },
      },
      "requestBodies": Object {
        "Pet": Object {
          "content": Object {
            "application/json": Object {
              "schema": Object {
                "$ref": "#/components/schemas/Pet",
              },
            },
            "application/xml": Object {
              "schema": Object {
                "$ref": "#/components/schemas/Pet",
              },
            },
          },
          "description": "Pet object that needs to be added to the store",
          "required": true,
        },
        "UserArray": Object {
          "content": Object {
            "application/json": Object {
              "schema": Object {
                "items": Object {
                  "$ref": "#/components/schemas/User",
                },
                "type": "array",
              },
            },
          },
          "description": "List of user object",
          "required": true,
        },
      },
      "schemas": Object {
        "ApiResponse": Object {
          "properties": Object {
            "code": Object {
              "format": "int32",
              "type": "integer",
            },
            "message": Object {
              "type": "string",
            },
            "type": Object {
              "type": "string",
            },
          },
          "type": "object",
        },
        "Category": Object {
          "properties": Object {
            "id": Object {
              "format": "int64",
              "type": "integer",
            },
            "name": Object {
              "type": "string",
            },
          },
          "type": "object",
          "xml": Object {
            "name": "Category",
          },
        },
        "Order": Object {
          "properties": Object {
            "complete": Object {
              "default": false,
              "type": "boolean",
            },
            "id": Object {
              "format": "int64",
              "type": "integer",
            },
            "petId": Object {
              "format": "int64",
              "type": "integer",
            },
            "quantity": Object {
              "format": "int32",
              "type": "integer",
            },
            "shipDate": Object {
              "format": "date-time",
              "type": "string",
            },
            "status": Object {
              "description": "Order Status",
              "enum": Array [
                "placed",
                "approved",
                "delivered",
              ],
              "type": "string",
            },
          },
          "type": "object",
          "xml": Object {
            "name": "Order",
          },
        },
        "Pet": Object {
          "properties": Object {
            "category": Object {
              "$ref": "#/components/schemas/Category",
            },
            "id": Object {
              "format": "int64",
              "type": "integer",
            },
            "name": Object {
              "example": "doggie",
              "type": "string",
            },
            "photoUrls": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
              "xml": Object {
                "name": "photoUrl",
                "wrapped": true,
              },
            },
            "status": Object {
              "description": "pet status in the store",
              "enum": Array [
                "available",
                "pending",
                "sold",
              ],
              "type": "string",
            },
            "tags": Object {
              "items": Object {
                "$ref": "#/components/schemas/Tag",
              },
              "type": "array",
              "xml": Object {
                "name": "tag",
                "wrapped": true,
              },
            },
          },
          "required": Array [
            "name",
            "photoUrls",
          ],
          "type": "object",
          "xml": Object {
            "name": "Pet",
          },
        },
        "Tag": Object {
          "properties": Object {
            "id": Object {
              "format": "int64",
              "type": "integer",
            },
            "name": Object {
              "type": "string",
            },
          },
          "type": "object",
          "xml": Object {
            "name": "Tag",
          },
        },
        "User": Object {
          "properties": Object {
            "email": Object {
              "type": "string",
            },
            "firstName": Object {
              "type": "string",
            },
            "id": Object {
              "format": "int64",
              "type": "integer",
            },
            "lastName": Object {
              "type": "string",
            },
            "password": Object {
              "type": "string",
            },
            "phone": Object {
              "type": "string",
            },
            "userStatus": Object {
              "description": "User Status",
              "format": "int32",
              "type": "integer",
            },
            "username": Object {
              "type": "string",
            },
          },
          "type": "object",
          "xml": Object {
            "name": "User",
          },
        },
        "body": Object {
          "properties": Object {
            "name": Object {
              "description": "Updated name of the pet",
              "type": "string",
            },
            "status": Object {
              "description": "Updated status of the pet",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "securitySchemes": Object {
        "api_key": Object {
          "in": "header",
          "name": "api_key",
          "type": "apiKey",
        },
        "petstore_auth": Object {
          "flows": Object {
            "implicit": Object {
              "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
              "scopes": Object {
                "read:pets": "read your pets",
                "write:pets": "modify pets in your account",
              },
            },
          },
          "type": "oauth2",
        },
      },
    },
    "externalDocs": Object {
      "description": "Find out more about Swagger",
      "url": "http://swagger.io",
    },
    "info": Object {
      "contact": Object {
        "email": "apiteam@swagger.io",
      },
      "description": "This is a sample Petstore server.  You can find
out more about Swagger at
[http://swagger.io](http://swagger.io) or on
[irc.freenode.net, #swagger](http://swagger.io/irc/).
",
      "license": Object {
        "name": "Apache 2.0",
        "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
      },
      "termsOfService": "http://swagger.io/terms/",
      "title": "Swagger Petstore",
      "version": "1.0.0",
    },
    "openapi": "3.0.0",
    "paths": Object {
      "/pet": Object {
        "post": Object {
          "operationId": "addPet",
          "requestBody": Object {
            "$ref": "#/components/requestBodies/Pet",
          },
          "responses": Object {
            "405": Object {
              "description": "Invalid input",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Add a new pet to the store",
          "tags": Array [
            "pet",
          ],
        },
        "put": Object {
          "operationId": "updatePet",
          "requestBody": Object {
            "$ref": "#/components/requestBodies/Pet",
          },
          "responses": Object {
            "400": Object {
              "description": "Invalid ID supplied",
            },
            "404": Object {
              "description": "Pet not found",
            },
            "405": Object {
              "description": "Validation exception",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Update an existing pet",
          "tags": Array [
            "pet",
          ],
        },
      },
      "/pet/findByStatus": Object {
        "get": Object {
          "description": "Multiple status values can be provided with comma separated strings",
          "operationId": "findPetsByStatus",
          "parameters": Array [
            Object {
              "description": "Status values that need to be considered for filter",
              "explode": true,
              "in": "query",
              "name": "status",
              "required": true,
              "schema": Object {
                "items": Object {
                  "default": "available",
                  "enum": Array [
                    "available",
                    "pending",
                    "sold",
                  ],
                  "type": "string",
                },
                "type": "array",
              },
              "style": "form",
            },
          ],
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "items": Object {
                      "$ref": "#/components/schemas/Pet",
                    },
                    "type": "array",
                  },
                },
                "application/xml": Object {
                  "schema": Object {
                    "items": Object {
                      "$ref": "#/components/schemas/Pet",
                    },
                    "type": "array",
                  },
                },
              },
              "description": "successful operation",
            },
            "400": Object {
              "description": "Invalid status value",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Finds Pets by status",
          "tags": Array [
            "pet",
          ],
        },
      },
      "/pet/findByTags": Object {
        "get": Object {
          "deprecated": true,
          "description": "Muliple tags can be provided with comma separated strings. Use\\\\ \\\\ tag1, tag2, tag3 for testing.",
          "operationId": "findPetsByTags",
          "parameters": Array [
            Object {
              "description": "Tags to filter by",
              "explode": true,
              "in": "query",
              "name": "tags",
              "required": true,
              "schema": Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
              "style": "form",
            },
          ],
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "items": Object {
                      "$ref": "#/components/schemas/Pet",
                    },
                    "type": "array",
                  },
                },
                "application/xml": Object {
                  "schema": Object {
                    "items": Object {
                      "$ref": "#/components/schemas/Pet",
                    },
                    "type": "array",
                  },
                },
              },
              "description": "successful operation",
            },
            "400": Object {
              "description": "Invalid tag value",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Finds Pets by tags",
          "tags": Array [
            "pet",
          ],
        },
      },
      "/pet/{petId}": Object {
        "delete": Object {
          "operationId": "deletePet",
          "parameters": Array [
            Object {
              "explode": false,
              "in": "header",
              "name": "api_key",
              "required": false,
              "schema": Object {
                "type": "string",
              },
              "style": "simple",
            },
            Object {
              "description": "Pet id to delete",
              "explode": false,
              "in": "path",
              "name": "petId",
              "required": true,
              "schema": Object {
                "format": "int64",
                "type": "integer",
              },
              "style": "simple",
            },
          ],
          "responses": Object {
            "400": Object {
              "description": "Invalid ID supplied",
            },
            "404": Object {
              "description": "Pet not found",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Deletes a pet",
          "tags": Array [
            "pet",
          ],
        },
        "get": Object {
          "description": "Returns a single pet",
          "operationId": "getPetById",
          "parameters": Array [
            Object {
              "description": "ID of pet to return",
              "explode": false,
              "in": "path",
              "name": "petId",
              "required": true,
              "schema": Object {
                "format": "int64",
                "type": "integer",
              },
              "style": "simple",
            },
          ],
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/Pet",
                  },
                },
                "application/xml": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/Pet",
                  },
                },
              },
              "description": "successful operation",
            },
            "400": Object {
              "description": "Invalid ID supplied",
            },
            "404": Object {
              "description": "Pet not found",
            },
          },
          "security": Array [
            Object {
              "api_key": Array [],
            },
          ],
          "summary": "Find pet by ID",
          "tags": Array [
            "pet",
          ],
        },
        "post": Object {
          "operationId": "updatePetWithForm",
          "parameters": Array [
            Object {
              "description": "ID of pet that needs to be updated",
              "explode": false,
              "in": "path",
              "name": "petId",
              "required": true,
              "schema": Object {
                "format": "int64",
                "type": "integer",
              },
              "style": "simple",
            },
          ],
          "requestBody": Object {
            "content": Object {
              "application/x-www-form-urlencoded": Object {
                "schema": Object {
                  "$ref": "#/components/schemas/body",
                },
              },
            },
          },
          "responses": Object {
            "405": Object {
              "description": "Invalid input",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Updates a pet in the store with form data",
          "tags": Array [
            "pet",
          ],
        },
      },
      "/pet/{petId}/uploadImage": Object {
        "post": Object {
          "operationId": "uploadFile",
          "parameters": Array [
            Object {
              "description": "ID of pet to update",
              "explode": false,
              "in": "path",
              "name": "petId",
              "required": true,
              "schema": Object {
                "format": "int64",
                "type": "integer",
              },
              "style": "simple",
            },
          ],
          "requestBody": Object {
            "content": Object {
              "application/octet-stream": Object {
                "schema": Object {
                  "format": "binary",
                  "type": "string",
                },
              },
            },
          },
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/ApiResponse",
                  },
                },
              },
              "description": "successful operation",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "uploads an image",
          "tags": Array [
            "pet",
          ],
        },
      },
      "/store/inventory": Object {
        "get": Object {
          "description": "Returns a map of status codes to quantities",
          "operationId": "getInventory",
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "additionalProperties": Object {
                      "format": "int32",
                      "type": "integer",
                    },
                    "type": "object",
                  },
                },
              },
              "description": "successful operation",
            },
          },
          "security": Array [
            Object {
              "api_key": Array [],
            },
          ],
          "summary": "Returns pet inventories by status",
          "tags": Array [
            "store",
          ],
        },
      },
      "/store/order": Object {
        "post": Object {
          "operationId": "placeOrder",
          "requestBody": Object {
            "content": Object {
              "application/json": Object {
                "schema": Object {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "order placed for purchasing the pet",
            "required": true,
          },
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/Order",
                  },
                },
                "application/xml": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/Order",
                  },
                },
              },
              "description": "successful operation",
            },
            "400": Object {
              "description": "Invalid Order",
            },
          },
          "summary": "Place an order for a pet",
          "tags": Array [
            "store",
          ],
        },
      },
      "/store/order/{orderId}": Object {
        "delete": Object {
          "description": "For valid response try integer IDs with positive integer value.\\\\ \\\\ Negative or non-integer values will generate API errors",
          "operationId": "deleteOrder",
          "parameters": Array [
            Object {
              "description": "ID of the order that needs to be deleted",
              "explode": false,
              "in": "path",
              "name": "orderId",
              "required": true,
              "schema": Object {
                "format": "int64",
                "minimum": 1,
                "type": "integer",
              },
              "style": "simple",
            },
          ],
          "responses": Object {
            "400": Object {
              "description": "Invalid ID supplied",
            },
            "404": Object {
              "description": "Order not found",
            },
          },
          "summary": "Delete purchase order by ID",
          "tags": Array [
            "store",
          ],
        },
        "get": Object {
          "description": "For valid response try integer IDs with value >= 1 and <= 10.\\\\ \\\\ Other values will generated exceptions",
          "operationId": "getOrderById",
          "parameters": Array [
            Object {
              "description": "ID of pet that needs to be fetched",
              "explode": false,
              "in": "path",
              "name": "orderId",
              "required": true,
              "schema": Object {
                "format": "int64",
                "maximum": 10,
                "minimum": 1,
                "type": "integer",
              },
              "style": "simple",
            },
          ],
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/Order",
                  },
                },
                "application/xml": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/Order",
                  },
                },
              },
              "description": "successful operation",
            },
            "400": Object {
              "description": "Invalid ID supplied",
            },
            "404": Object {
              "description": "Order not found",
            },
          },
          "summary": "Find purchase order by ID",
          "tags": Array [
            "store",
          ],
        },
      },
      "/user": Object {
        "post": Object {
          "description": "This can only be done by the logged in user.",
          "operationId": "createUser",
          "requestBody": Object {
            "content": Object {
              "application/json": Object {
                "schema": Object {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "Created user object",
            "required": true,
          },
          "responses": Object {
            "default": Object {
              "description": "successful operation",
            },
          },
          "summary": "Create user",
          "tags": Array [
            "user",
          ],
        },
      },
      "/user/createWithArray": Object {
        "post": Object {
          "operationId": "createUsersWithArrayInput",
          "requestBody": Object {
            "$ref": "#/components/requestBodies/UserArray",
          },
          "responses": Object {
            "default": Object {
              "description": "successful operation",
            },
          },
          "summary": "Creates list of users with given input array",
          "tags": Array [
            "user",
          ],
        },
      },
      "/user/createWithList": Object {
        "post": Object {
          "operationId": "createUsersWithListInput",
          "requestBody": Object {
            "$ref": "#/components/requestBodies/UserArray",
          },
          "responses": Object {
            "default": Object {
              "description": "successful operation",
            },
          },
          "summary": "Creates list of users with given input array",
          "tags": Array [
            "user",
          ],
        },
      },
      "/user/login": Object {
        "get": Object {
          "operationId": "loginUser",
          "parameters": Array [
            Object {
              "description": "The user name for login",
              "explode": true,
              "in": "query",
              "name": "username",
              "required": true,
              "schema": Object {
                "type": "string",
              },
              "style": "form",
            },
            Object {
              "description": "The password for login in clear text",
              "explode": true,
              "in": "query",
              "name": "password",
              "required": true,
              "schema": Object {
                "type": "string",
              },
              "style": "form",
            },
          ],
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "type": "string",
                  },
                },
                "application/xml": Object {
                  "schema": Object {
                    "type": "string",
                  },
                },
              },
              "description": "successful operation",
              "headers": Object {
                "X-Expires-After": Object {
                  "description": "date in UTC when token expires",
                  "explode": false,
                  "schema": Object {
                    "format": "date-time",
                    "type": "string",
                  },
                  "style": "simple",
                },
                "X-Rate-Limit": Object {
                  "description": "calls per hour allowed by the user",
                  "explode": false,
                  "schema": Object {
                    "format": "int32",
                    "type": "integer",
                  },
                  "style": "simple",
                },
              },
            },
            "400": Object {
              "description": "Invalid username/password supplied",
            },
          },
          "summary": "Logs user into the system",
          "tags": Array [
            "user",
          ],
        },
      },
      "/user/logout": Object {
        "get": Object {
          "operationId": "logoutUser",
          "responses": Object {
            "default": Object {
              "description": "successful operation",
            },
          },
          "summary": "Logs out current logged in user session",
          "tags": Array [
            "user",
          ],
        },
      },
      "/user/{username}": Object {
        "delete": Object {
          "description": "This can only be done by the logged in user.",
          "operationId": "deleteUser",
          "parameters": Array [
            Object {
              "description": "The name that needs to be deleted",
              "explode": false,
              "in": "path",
              "name": "username",
              "required": true,
              "schema": Object {
                "type": "string",
              },
              "style": "simple",
            },
          ],
          "responses": Object {
            "400": Object {
              "description": "Invalid username supplied",
            },
            "404": Object {
              "description": "User not found",
            },
          },
          "summary": "Delete user",
          "tags": Array [
            "user",
          ],
        },
        "get": Object {
          "operationId": "getUserByName",
          "parameters": Array [
            Object {
              "$ref": "#/components/parameters/Username",
            },
          ],
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/User",
                  },
                },
                "application/xml": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/User",
                  },
                },
              },
              "description": "successful operation",
            },
            "400": Object {
              "description": "Invalid username supplied",
            },
            "404": Object {
              "description": "User not found",
            },
          },
          "summary": "Get user by user name",
          "tags": Array [
            "user",
          ],
        },
        "put": Object {
          "description": "This can only be done by the logged in user.",
          "operationId": "updateUser",
          "parameters": Array [
            Object {
              "$ref": "#/components/parameters/Username",
            },
          ],
          "requestBody": Object {
            "content": Object {
              "application/json": Object {
                "schema": Object {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "Updated user object",
            "required": true,
          },
          "responses": Object {
            "400": Object {
              "description": "Invalid user supplied",
            },
            "404": Object {
              "description": "User not found",
            },
          },
          "summary": "Updated user",
          "tags": Array [
            "user",
          ],
        },
      },
    },
    "servers": Array [
      Object {
        "description": "SwaggerHub API Auto Mocking",
        "url": "https://virtserver.swaggerhub.com/nicola_igenius/petstore/1.0.0",
      },
      Object {
        "url": "https://petstore.swagger.io/v2",
      },
    ],
    "tags": Array [
      Object {
        "description": "Everything about your Pets",
        "externalDocs": Object {
          "description": "Find out more",
          "url": "http://swagger.io",
        },
        "name": "pet",
      },
      Object {
        "description": "Access to Petstore orders",
        "name": "store",
      },
      Object {
        "description": "Operations about user",
        "externalDocs": Object {
          "description": "Find out more about our store",
          "url": "http://swagger.io",
        },
        "name": "user",
      },
    ],
  },
  "models": Object {
    "#/components/schemas/ApiResponse": Object {
      "description": undefined,
      "isExported": true,
      "isReadonly": false,
      "kind": "TypeDeclaration",
      "name": "ApiResponse",
      "type": Object {
        "kind": "InterfaceCombinator",
        "name": undefined,
        "properties": Array [
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "code",
            "kind": "Property",
            "type": Object {
              "kind": "IntegerType",
              "name": "Integer",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "message",
            "kind": "Property",
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "type",
            "kind": "Property",
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
        ],
      },
    },
    "#/components/schemas/Category": Object {
      "description": undefined,
      "isExported": true,
      "isReadonly": false,
      "kind": "TypeDeclaration",
      "name": "Category",
      "type": Object {
        "kind": "InterfaceCombinator",
        "name": undefined,
        "properties": Array [
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "id",
            "kind": "Property",
            "type": Object {
              "kind": "IntegerType",
              "name": "Integer",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "name",
            "kind": "Property",
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
        ],
      },
    },
    "#/components/schemas/Order": Object {
      "description": undefined,
      "isExported": true,
      "isReadonly": false,
      "kind": "TypeDeclaration",
      "name": "Order",
      "type": Object {
        "kind": "InterfaceCombinator",
        "name": undefined,
        "properties": Array [
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "complete",
            "kind": "Property",
            "type": Object {
              "kind": "BooleanType",
              "name": "boolean",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "id",
            "kind": "Property",
            "type": Object {
              "kind": "IntegerType",
              "name": "Integer",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "petId",
            "kind": "Property",
            "type": Object {
              "kind": "IntegerType",
              "name": "Integer",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "quantity",
            "kind": "Property",
            "type": Object {
              "kind": "IntegerType",
              "name": "Integer",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "shipDate",
            "kind": "Property",
            "type": Object {
              "dependencies": Array [],
              "kind": "CustomCombinator",
              "runtime": "models.DateFromISOString",
              "static": "models.DateFromISOString",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "status",
            "kind": "Property",
            "type": Object {
              "dependencies": Array [],
              "kind": "CustomCombinator",
              "runtime": "models.OrderStatus",
              "static": "models.OrderStatus",
            },
          },
        ],
      },
    },
    "#/components/schemas/Order/status": Object {
      "description": undefined,
      "isExported": true,
      "isReadonly": false,
      "kind": "TypeDeclaration",
      "name": "OrderStatus",
      "type": Object {
        "kind": "UnionCombinator",
        "name": undefined,
        "types": Array [
          Object {
            "kind": "LiteralCombinator",
            "name": undefined,
            "value": "placed",
          },
          Object {
            "kind": "LiteralCombinator",
            "name": undefined,
            "value": "approved",
          },
          Object {
            "kind": "LiteralCombinator",
            "name": undefined,
            "value": "delivered",
          },
        ],
      },
    },
    "#/components/schemas/Pet": Object {
      "description": undefined,
      "isExported": true,
      "isReadonly": false,
      "kind": "TypeDeclaration",
      "name": "Pet",
      "type": Object {
        "kind": "InterfaceCombinator",
        "name": undefined,
        "properties": Array [
          Object {
            "description": undefined,
            "isOptional": true,
            "key": "category",
            "kind": "Property",
            "type": Object {
              "dependencies": Array [],
              "kind": "CustomCombinator",
              "runtime": "models.Category",
              "static": "models.Category",
            },
          },
          Object {
            "description": undefined,
            "isOptional": true,
            "key": "id",
            "kind": "Property",
            "type": Object {
              "kind": "IntegerType",
              "name": "Integer",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "name",
            "kind": "Property",
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "photoUrls",
            "kind": "Property",
            "type": Object {
              "kind": "ArrayCombinator",
              "name": undefined,
              "type": Object {
                "kind": "StringType",
                "name": "string",
              },
            },
          },
          Object {
            "description": undefined,
            "isOptional": true,
            "key": "status",
            "kind": "Property",
            "type": Object {
              "dependencies": Array [],
              "kind": "CustomCombinator",
              "runtime": "models.PetStatus",
              "static": "models.PetStatus",
            },
          },
          Object {
            "description": undefined,
            "isOptional": true,
            "key": "tags",
            "kind": "Property",
            "type": Object {
              "kind": "ArrayCombinator",
              "name": undefined,
              "type": Object {
                "dependencies": Array [],
                "kind": "CustomCombinator",
                "runtime": "models.Tag",
                "static": "models.Tag",
              },
            },
          },
        ],
      },
    },
    "#/components/schemas/Pet/status": Object {
      "description": undefined,
      "isExported": true,
      "isReadonly": false,
      "kind": "TypeDeclaration",
      "name": "PetStatus",
      "type": Object {
        "kind": "UnionCombinator",
        "name": undefined,
        "types": Array [
          Object {
            "kind": "LiteralCombinator",
            "name": undefined,
            "value": "available",
          },
          Object {
            "kind": "LiteralCombinator",
            "name": undefined,
            "value": "pending",
          },
          Object {
            "kind": "LiteralCombinator",
            "name": undefined,
            "value": "sold",
          },
        ],
      },
    },
    "#/components/schemas/Tag": Object {
      "description": undefined,
      "isExported": true,
      "isReadonly": false,
      "kind": "TypeDeclaration",
      "name": "Tag",
      "type": Object {
        "kind": "InterfaceCombinator",
        "name": undefined,
        "properties": Array [
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "id",
            "kind": "Property",
            "type": Object {
              "kind": "IntegerType",
              "name": "Integer",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "name",
            "kind": "Property",
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
        ],
      },
    },
    "#/components/schemas/User": Object {
      "description": undefined,
      "isExported": true,
      "isReadonly": false,
      "kind": "TypeDeclaration",
      "name": "User",
      "type": Object {
        "kind": "InterfaceCombinator",
        "name": undefined,
        "properties": Array [
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "email",
            "kind": "Property",
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "firstName",
            "kind": "Property",
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "id",
            "kind": "Property",
            "type": Object {
              "kind": "IntegerType",
              "name": "Integer",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "lastName",
            "kind": "Property",
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "password",
            "kind": "Property",
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "phone",
            "kind": "Property",
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "userStatus",
            "kind": "Property",
            "type": Object {
              "kind": "IntegerType",
              "name": "Integer",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "username",
            "kind": "Property",
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
        ],
      },
    },
    "#/components/schemas/body": Object {
      "description": undefined,
      "isExported": true,
      "isReadonly": false,
      "kind": "TypeDeclaration",
      "name": "Body",
      "type": Object {
        "kind": "InterfaceCombinator",
        "name": undefined,
        "properties": Array [
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "name",
            "kind": "Property",
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
          Object {
            "description": undefined,
            "isOptional": false,
            "key": "status",
            "kind": "Property",
            "type": Object {
              "kind": "StringType",
              "name": "string",
            },
          },
        ],
      },
    },
    "#/paths/~1pet~1findByStatus/get/parameters/0/schema/items": Object {
      "description": undefined,
      "isExported": true,
      "isReadonly": false,
      "kind": "TypeDeclaration",
      "name": "StatusItems",
      "type": Object {
        "kind": "UnionCombinator",
        "name": undefined,
        "types": Array [
          Object {
            "kind": "LiteralCombinator",
            "name": undefined,
            "value": "available",
          },
          Object {
            "kind": "LiteralCombinator",
            "name": undefined,
            "value": "pending",
          },
          Object {
            "kind": "LiteralCombinator",
            "name": undefined,
            "value": "sold",
          },
        ],
      },
    },
  },
}
`;
